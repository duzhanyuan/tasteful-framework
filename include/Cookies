/**
  * (C) LGPL-3
  *
  * Tasteful Framework <https://github.com/scheibel/tasteful-framework>
  *
  * Copyright: 2012 Lux, Scheibel
  * Authors:
  *     Roland Lux <rollux2000@googlemail.com>
  *     Willy Scheibel <willyscheibel@gmx.de>
  * 
  * This file is part of Tasteful Framework.
  *
  * Tasteful Framework is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  * 
  * Tasteful Framework is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  * 
  * You should have received a copy of the GNU Lesser General Public License
  * along with Tasteful Framework.  If not, see <http://www.gnu.org/licenses/>.
  **/

#pragma once

#include <QString>
#include <QVariant>
#include <tnt/cookie.h>
#include <internal/util.h>

using namespace internal;

class Cookies
{
	public:
		Cookies(tnt::Cookies cookies) : cookies(cookies) {
			
		};
		~Cookies() {
			
		};
		
		tnt::Cookies& getCookies() {
			return cookies;
		};
		bool has(QString key) {
			return cookies.hasCookie(key.toStdString());
		}
		template <typename T>
		T get(QString key, T defaultValue) {
			std::string value = cookies.getCookie(key.toStdString()).getValue();
			
			return value.empty() ? defaultValue : convertViaQVariant<T, std::string>(value);
		};
		template <typename T>
		void set(QString key, T value) {
			cookies.setCookie(key.toStdString(), tnt::Cookie(convertViaQVariant<std::string, T>(value)));
		};
		void clearCookie(QString key) {
			cookies.clearCookie(key.toStdString());
		}
	private:
		tnt::Cookies cookies;
};
