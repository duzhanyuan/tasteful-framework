/**
  * (C) LGPL-3
  *
  * Tasteful Framework <https://github.com/scheibel/tasteful-framework>
  *
  * Copyright: 2012 Lux, Scheibel
  * Authors:
  *     Roland Lux <rollux2000@googlemail.com>
  *     Willy Scheibel <willyscheibel@gmx.de>
  * 
  * This file is part of Tasteful Framework.
  *
  * Tasteful Framework is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  * 
  * Tasteful Framework is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  * 
  * You should have received a copy of the GNU Lesser General Public License
  * along with Tasteful Framework.  If not, see <http://www.gnu.org/licenses/>.
  **/

#pragma once

#define DEFINE_CRUD_ACTIONS(ControllerClass, MapperClass) \
	public:\
		typedef typename MapperClass::Model Model;\
		typedef typename MapperClass::Identity Identity;\
	protected:\
		MapperClass& getDataMapper() const {\
			static MapperClass& dataMapper = MapperClass::instance();\
			\
			return dataMapper;\
		}\
		QList<Model*> findAll() const;\
	public:\
		void index() {\
			render(listViewFor(allModels()));\
		}\
		\
		void show() {\
			Identity id = parameters["id"].value<Identity>();\
			\
			render(showViewFor(getDataMapper().get(id), id));\
		}\
		\
		void create() {\
			render(editViewFor(nullptr, Identity()));\
		}\
		\
		void edit() {\
			Identity id = parameters["id"].value<Identity>();\
			\
			render(editViewFor(getDataMapper().get(id), id));\
		}\
		\
		void save() {\
			Identity id = parameters["id"].value<Identity>();\
			Model* model = nullptr;\
			QVariantMap record;\
			\
			if (getDataMapper().isValidId(id)) {\
				model = getDataMapper().get(id);\
			} else {\
				model = getDataMapper().newModel();\
			}\
			\
			for (const QString& key : getDataMapper().selectVariables()) {\
				if (parameters.contains(key)) {\
					record[key] = parameters[key].asQVariant();\
				}\
			}\
			\
			if (model) {\
				getDataMapper().buildFromRecord(model, record);\
				beforeSave(model);\
				getDataMapper().save(model);\
			}\
			\
			redirect(url(&ControllerClass::index));\
		}\
		\
		void remove() {\
			Identity id = parameters["id"].value<Identity>();\
			\
			Model* model = getDataMapper().get(id);\
			\
			if (model) {\
				getDataMapper().remove(model);\
			}\
			\
			redirect(url(&ControllerClass::index));\
		}\
	protected:\
		QHash<Identity, Model*> allModels() const {\
			QHash<Identity, Model*> models;\
			\
			for (Model* model : findAll()) {\
				models.insert(getDataMapper().idOf(model), model);\
			}\
			\
			return models;\
		};\
	private:\

